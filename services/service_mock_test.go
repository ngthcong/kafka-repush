// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package services_test.go is a generated GoMock package.
package services_test

import (
	"github.com/golang/mock/gomock"
	"reflect"
)

import (
	services "kafka-repush/services"
	os "os"
)

// MockLogService is a mock of LogService interface
type MockLogService struct {
	ctrl     *gomock.Controller
	recorder *MockLogServiceMockRecorder
}

// MockLogServiceMockRecorder is the mock recorder for MockLogService
type MockLogServiceMockRecorder struct {
	mock *MockLogService
}

// NewMockLogService creates a new mock instance
func NewMockLogService(ctrl *gomock.Controller) *MockLogService {
	mock := &MockLogService{ctrl: ctrl}
	mock.recorder = &MockLogServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogService) EXPECT() *MockLogServiceMockRecorder {
	return m.recorder
}

// GetConfig mocks base method
func (m *MockLogService) GetConfig(fileName string) (services.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", fileName)
	ret0, _ := ret[0].(services.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig
func (mr *MockLogServiceMockRecorder) GetConfig(fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockLogService)(nil).GetConfig), fileName)
}

// SendMessage mocks base method
func (m *MockLogService) SendMessage(topic string, msg services.ProducerMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", topic, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage
func (mr *MockLogServiceMockRecorder) SendMessage(topic, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockLogService)(nil).SendMessage), topic, msg)
}

// StoreConfig mocks base method
func (m *MockLogService) StoreConfig(file *os.File, config services.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreConfig", file, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreConfig indicates an expected call of StoreConfig
func (mr *MockLogServiceMockRecorder) StoreConfig(file, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreConfig", reflect.TypeOf((*MockLogService)(nil).StoreConfig), file, config)
}

// WriteFailPush mocks base method
func (m *MockLogService) WriteFailPush(msg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFailPush", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFailPush indicates an expected call of WriteFailPush
func (mr *MockLogServiceMockRecorder) WriteFailPush(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFailPush", reflect.TypeOf((*MockLogService)(nil).WriteFailPush), msg)
}

// Close mocks base method
func (m *MockLogService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockLogServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLogService)(nil).Close))
}
