// Code generated by MockGen. DO NOT EDIT.
// Source: services/service.go

// Package services_test is a generated GoMock package.
package services_test

import (
	gomock "github.com/golang/mock/gomock"
	services "kafka-repush/services"
	os "os"
	reflect "reflect"
)

// MockLogService is a mock of LogService interface
type MockLogService struct {
	ctrl     *gomock.Controller
	recorder *MockLogServiceMockRecorder
}

// MockLogServiceMockRecorder is the mock recorder for MockLogService
type MockLogServiceMockRecorder struct {
	mock *MockLogService
}

// NewMockLogService creates a new mock instance
func NewMockLogService(ctrl *gomock.Controller) *MockLogService {
	mock := &MockLogService{ctrl: ctrl}
	mock.recorder = &MockLogServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogService) EXPECT() *MockLogServiceMockRecorder {
	return m.recorder
}

// GetLastLine mocks base method
func (m *MockLogService) GetLastLine(fileName string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastLine", fileName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastLine indicates an expected call of GetLastLine
func (mr *MockLogServiceMockRecorder) GetLastLine(fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastLine", reflect.TypeOf((*MockLogService)(nil).GetLastLine), fileName)
}

// GetLog mocks base method
func (m *MockLogService) GetLog(fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLog", fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetLog indicates an expected call of GetLog
func (mr *MockLogServiceMockRecorder) GetLog(fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLog", reflect.TypeOf((*MockLogService)(nil).GetLog), fileName)
}

// GetFailFile mocks base method
func (m *MockLogService) GetFailFile(fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailFile", fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFailFile indicates an expected call of GetFailFile
func (mr *MockLogServiceMockRecorder) GetFailFile(fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailFile", reflect.TypeOf((*MockLogService)(nil).GetFailFile), fileName)
}

// SendMessage mocks base method
func (m *MockLogService) SendMessage(topic string, msg services.ProducerMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", topic, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage
func (mr *MockLogServiceMockRecorder) SendMessage(topic, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockLogService)(nil).SendMessage), topic, msg)
}

// StoreLastLine mocks base method
func (m *MockLogService) StoreLastLine(fileName string, lineNum int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreLastLine", fileName, lineNum)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreLastLine indicates an expected call of StoreLastLine
func (mr *MockLogServiceMockRecorder) StoreLastLine(fileName, lineNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreLastLine", reflect.TypeOf((*MockLogService)(nil).StoreLastLine), fileName, lineNum)
}

// WriteFailPush mocks base method
func (m *MockLogService) WriteFailPush(msg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFailPush", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFailPush indicates an expected call of WriteFailPush
func (mr *MockLogServiceMockRecorder) WriteFailPush(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFailPush", reflect.TypeOf((*MockLogService)(nil).WriteFailPush), msg)
}

// CloseFile mocks base method
func (m *MockLogService) CloseFile(logFile, failFile *os.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseFile", logFile, failFile)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseFile indicates an expected call of CloseFile
func (mr *MockLogServiceMockRecorder) CloseFile(logFile, failFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseFile", reflect.TypeOf((*MockLogService)(nil).CloseFile), logFile, failFile)
}

// Close mocks base method
func (m *MockLogService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockLogServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLogService)(nil).Close))
}
