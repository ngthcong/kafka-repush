// Code generated by MockGen. DO NOT EDIT.
// Source: services/kafka.go

// Package services_test is a generated GoMock package.
package services_test

import (
	gomock "github.com/golang/mock/gomock"
	services "kafka-repush/services"
	reflect "reflect"
)

// MockProducer is a mock of Producer interface
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockProducer) Send(topic string, msg services.ProducerMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", topic, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockProducerMockRecorder) Send(topic, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProducer)(nil).Send), topic, msg)
}

// Close mocks base method
func (m *MockProducer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProducer)(nil).Close))
}

// MockProducerMessage is a mock of ProducerMessage interface
type MockProducerMessage struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMessageMockRecorder
}

// MockProducerMessageMockRecorder is the mock recorder for MockProducerMessage
type MockProducerMessageMockRecorder struct {
	mock *MockProducerMessage
}

// NewMockProducerMessage creates a new mock instance
func NewMockProducerMessage(ctrl *gomock.Controller) *MockProducerMessage {
	mock := &MockProducerMessage{ctrl: ctrl}
	mock.recorder = &MockProducerMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProducerMessage) EXPECT() *MockProducerMessageMockRecorder {
	return m.recorder
}

// Key mocks base method
func (m *MockProducerMessage) Key() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key
func (mr *MockProducerMessageMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockProducerMessage)(nil).Key))
}
